from fastapi import FastAPI
from contextlib import asynccontextmanager
from epss.epss import EPSS
from process_results.process_results import ProcessResults
from scanner.scanner import Scanner
from models.models import ScanContainer
from get_results.get_results import GetResults

'''FastAPI configuration file'''

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Steps to complete on API load
    print('Starting API...')
    pass
    yield
    # Steps to complete on API shutdown
    print('Shutting API down...')
    pass

app = FastAPI(lifespan=lifespan)
scanner = Scanner()
epss = EPSS()
process_result = ProcessResults(epss=epss)
get_results = GetResults()

'''Invoke a container scan endpoint'''
@app.post('/scan-container/')
async def scan_container(scan_container: ScanContainer):
    container_name = scan_container.name
    print(f'Scanning container: {container_name}')
    scanner.scanner(container_name)
    process_result.process_raw_results(container_name)
    print('Successfully scanned container!')
    return {'result': f'Successfully scanned container: {container_name}'}

'''Get a container scan result endpoint'''
@app.get('/container')
async def scan_container(name: str):
    return get_results.get_results(name)

if __name__ == '__main__':
    pass
